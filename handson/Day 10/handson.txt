pointer:
	special variable 
		to hold address of data variable 
	
	there is data variable. why pointer?
		!!! Suma VummadSingh 
		Good attempt. 
		Advantabe of pointer:
			pointer - it reduces the complexity of the program 
			it will increase the speed of the execution.
			
			int firstNumber = 10;
			int* firstNumberAddr = &firstNumber;
			
			printf("The value is %d\n",firstNumber);	//I 	slower than II 
			printf("The value is %d\n",(*firstNumber));	//II 	little speeder than I
			
			!!!studied from the article.
		
	there is data variable. why pointer?
		!!! Pooja
		without how can I access the dynamic memory I am creating.
		
		dynamic memory will have name but we can get the address of the dynamic memory 
		
		to store the address of the dynamic memory, we require special variable called "pointer" 
		
		pointer can point address of dynamic memory as well as static memory 	
		
	Is there any pointer to point another pointer?
		"pointer to poitner"								Yes		
		"pointer to 'pointer to pointer'"					Yes
		"pointer to `pointer to 'pointer to pointer'`"		Yes
		....												Yes
		
		Maximum problems can be solved via the pointer
			Suppose the requirement is extended then double pointer is enough.
--------------------------------------------------------
	Two operators to process the pointer:
		&	"address of"
		*	"indirection" 
		
	To access the element using the pointer for array:
		[] subscript operator 
		
	To access the member of the struct/union using struct/union object pointer:
		->	member access using object pointer 
--------------------------------------------------------



========================================================
Question
find sum and product of the two numbers using the below function:
	void findSumAndProduct(long first, long second, long* sumAddr, long* productAddr);

1. Define the function "findSumAndProduct" to find sum and product of two numbers 
2. In main(), Read two numbers, call "findSumAndProduct", and print sum and product 
========================================================
#include<stdio.h>
#include<stdlib.h>
void findSumAndProduct(long first, long second, long* sumAddr, long* productAddr);
int main(){
    long firstNumber=0L;
    long secondNumber=0L;
    printf("Enter first number:"); scanf("%ld",&firstNumber);
    printf("Enter second number:"); scanf("%ld",&seconNumber);
    long sum=0L;
    long product=0L;
    findSumAndProduct(firstNumber, secondNumber, &sum, &product);
    printf("sum and product of %ld and %ld are %ld and %ld\n",
        firstNumber, secondNumber,
        sum, product);
        
    return EXIT_SUCCESS;
}
void findSumAndProduct(long first, long second, long* sumAddr, long* productAddr){
    long sum = first + second;
    long product = first * second;
    (*sumAddr) = sum;           
    (*productAddr) = product;   

}

mahesh@maheshubuntu:~/c_learnings$ gcc sum_product_using_pointer.c -o sum_product_using_pointer
mahesh@maheshubuntu:~/c_learnings$ ./sum_product_using_pointer
Enter first number:20
Enter second number:3
sum and product of 20 and 3 are 23 and 60
mahesh@maheshubuntu:~/c_learnings$ 
========================================================

----------------------------------------- 
    !!!Shranu Kumar
    (*sumAddr)++;
-----------------------------------------    
    
    *(sumAddr++)
    
    sumAddr++
    *(sumAddr)
    
    (*sumAddr)++;
-----------------------------------------    


========================================================
Question
find sum and product of the two numbers using the below function:
	void findSumAndProduct(long first, long second, long* sumAddr, long* productAddr);

1. Define the function "findSumAndProduct" to find sum and product of two numbers 
2. In main(), Read two numbers, call "findSumAndProduct", and print sum and product 
Use dynamic memory for input data and processed data

========================================================
#include<stdio.h>
#include<stdlib.h>
void findSumAndProduct(long* firstAddr, long* secondAddr, long* sumAddr, long* productAddr);
int main(){
    long* firstNumberAddr=NULL;     // if NOT NULL, WILD PTR
    long* secondNumberAddr=NULL;
    
    firstNumberAddr=(long*)malloc(1*sizeof(long));
    secondNumberAddr=(long*)malloc(1*sizeof(long));
    
    printf("Enter first number:"); scanf("%ld",firstNumberAddr);
    printf("Enter second number:"); scanf("%ld",secondNumberAddr);
    
    long* sumAddr=NULL;
    long* productAddr=NULL;
    
    sumAddr=(long*)malloc(1*sizeof(long));
    productAddr=(long*)malloc(1*sizeof(long));
    
    findSumAndProduct(firstNumberAddr, secondNumberAddr, sumAddr, productAddr);
    printf("sum and product of %ld and %ld are %ld and %ld\n",
        (*firstNumberAddr), (*secondNumberAddr),
        (*sumAddr), (*productAddr));
        
    free(firstNumberAddr);   //DANGLING PTR 
    firstNumberAddr = NULL;
    
    free(secondNumberAddr);
    secondNumberAddr = NULL;
    
    free(sumAddr);
    sumAddr = NULL;
    
    free(productAddr);
    productAddr = NULL;
     
    return EXIT_SUCCESS;
}
void findSumAndProduct(long* firstAddr, long* secondAddr, long* sumAddr, long* productAddr){
    long sum = (*firstAddr) + (*secondAddr);
    long product = (*firstAddr) * (*secondAddr);
    (*sumAddr) = sum;           
    (*productAddr) = product;   
}
========================================================

ISSUES/PROBLEMS connected with memory management

****************ILLEGAL MEMORY MANAGEMENT****************

processing WILD PTR 
or
processing DANGLING PTR 
are illegal


****************MEMORY HOLE /MEMORY LEAK****************
The pointers pointing the Dynamically Allocated memory 
    if changed the pointing to other memory blocks 
    here, Dynamically Allocated memory was not released.
    
    100 x 4 long blocks will be dynamically created 
    not released to operating system 
    
If we are not releasing the dynamic memory properly,
leads to "memory hole/memory leak"

To fix for "memory hole/memory leak",
we have to release the dynamic memory properly.
This we have to ensure for better "memory management"    
    
========================================================    

Better memory management
1. Dont use illegal memory 
2. Release the dynamic memory properly 
    ie. for every malloc/calloc use free function
========================================================    

Summarize:
   1. Two operators 
        &
        *
   2. <stdlib> dynamic memory functions
        malloc 
        free 
  
Pointers  
    1. pointer to array 
    2. pointer arithmetic 
        pointer addition to number 
        pointer subtraction with number 
        pointer increment 
        pointer decrement 
        subtraction between two pointers / addresses 
    3. pointer to structure 
    
========================================================
1. Read N salaries(double) and print forward and backward 

Define "salaries" as static array 
pass "salaries" as array 
    -> subscripted variable vs subscripted argument 
========================================================
#define MAX_SIZE 1000
#include<stdio.h>
#include<stdlib.h>
void readArrayData(int size, double arrayData[]){
    for(int I=0; I < size; I++){
        scanf("%lf",&arrayData[I]);
    }
}
void printArrayData(int size, double arrayData[]){
    for(int I=0; I < size; I++){
        printf("%.2lf ",arrayData[I]);
    }
    printf("\n");
}
void printArrayDataBackward(int size, double arrayData[]){
    for(int I=size-1; I >= 0; I--){
        printf("%.2lf ",arrayData[I]);
    }
    printf("\n");
}
int main(){
    int N=0;
    printf("Enter number of salaries:"); scanf("%d",&N);
    double salaries[MAX_SIZE];
    
    printf("Enter salaries one by one:");
    readArrayData(N,salaries);
    
    printf("salaries are:\n");
    printArrayData(N,salaries);
    
    printf("reverse of the salaries are:\n");
    printArrayDataBackward(N,salaries);
    
    return EXIT_SUCCESS;
}
========================================================



========================================================
Read N salaries(double) and print forward and backward 

Define "salaries" as static array 

Application of 
    pointer arithmetic 
        pointer addition with number 
        xxxpointer substraction with number 
        pointer increment 
        pointer decrement 
        pass array to function as pointer 
    
    synonymous:
        arrayName[index]            <---
        (*(arrayName+index))
        (*(index+arrayName))        -->
        index[arrayName]
========================================================
#define MAX_SIZE 1000
#include<stdio.h>
#include<stdlib.h>
void readArrayData(int size, double* arrayData){
//void readArrayData(int size, double arrayData[]){
    for(int I=0; I < size; I++){
        //scanf("%lf",&arrayData[I]);
		//scanf("%lf",(arrayData+I));
		//scanf("%lf",(I + arrayData));
		scanf("%lf",&I[arrayData]);
    }
}
void printArrayData(int size, double* arrayData){
//void printArrayData(int size, double arrayData[]){//double arrayData[] -> double* arrayData
    for(int I=0; I < size; I++){
        printf("%.2lf ",(*arrayData));
        arrayData++;
    }
    printf("\n");
}
void printArrayDataBackward(int size, double* arrayData){
//void printArrayDataBackward(int size, double arrayData[]){
    //for(int I=size-1; I >= 0; I--){
	arrayData = arrayData + (size - 1);
	for(int I=0; I < size; I++){
        printf("%.2lf ",(*arrayData));
		arrayData--;
    }
    printf("\n");
}
int main(){
    int N=0;
    printf("Enter number of salaries:"); scanf("%d",&N);
    double salaries[MAX_SIZE];
    
    printf("Enter salaries one by one:");
    readArrayData(N,salaries);
    
    printf("salaries are:\n");
    printArrayData(N,salaries);
    
    printf("reverse of the salaries are:\n");
    printArrayDataBackward(N,salaries);
    
    return EXIT_SUCCESS;
}
========================================================

    
========================================================
Read N salaries(double) and print forward and backward 

Define "salaries" as dynamic array 

Application of 
    pointer arithmetic 
        pointer addition with number 
        xxxpointer substraction with number 
        pointer increment 
        pointer decrement 
        pass array to function as pointer 
    
    synonymous:
        arrayName[index]            <---
        (*(arrayName+index))
        (*(index+arrayName))        -->
        index[arrayName]
========================================================

#include<stdio.h>
#include<stdlib.h>
void readArrayData(int size, double* arrayData){
    for(int I=0; I < size; I++){
        scanf("%lf",&arrayData[I]);
    }
}
void printArrayData(int size, double* arrayData){
    for(int I=0; I < size; I++){
        printf("%.2lf ",arrayData[I]);
    }
    printf("\n");
}
void printArrayDataBackward(int size, double* arrayData){
	for(int I=size-1; I >= 0; I--){
        printf("%.2lf ",arrayData[I]);
    }
    printf("\n");
}
int main(){
    int N=0;
    printf("Enter number of salaries:"); scanf("%d",&N);
    double* salaries = NULL;
    //salaries = (double*)malloc(N * sizeof(double)); 
    salaries = (double*)calloc(N, sizeof(double));
    
    printf("Enter salaries one by one:");
    readArrayData(N,salaries);
    
    printf("salaries are:\n");
    printArrayData(N,salaries);
    
    printf("reverse of the salaries are:\n");
    printArrayDataBackward(N,salaries);
    
    free(salaries);
    salaries = NULL;
    
    return EXIT_SUCCESS;
}
========================================================


static memory is created in stack memory 

<stdlib.h> dynamic memory functions 

    dynamic memory is created in heap memory 

malloc, calloc, realloc will gets memory directly from operating system by system calls

malloc(bytes) ->  receives one argument ie no of bytes required for dynamic memory creation
                  ->  returns address of void*
                  
    - non-contiguous memory blocks 
    Example
    double* salaries;
    salaries = (double*)malloc(10 * sizeof(double));
    
    Here, the cast (double*) will do two jobs:
        1. Dividing void* one block into multiple double* blocks 
        2. returns address of first block 
        
calloc(sizeOfBlocks, NumberOfBytesPerBlock)        
    -> Receives two arguments 
    -> returns void* one block address 
        
    - contiguous memory blocks 
    Example
    double* salaries;
    salaries = (double*)calloc(10, sizeof(double));
    
    Here, the cast (double*) will do two jobs:
        1. Dividing void* one block into multiple double* blocks 
        2. returns address of first block 
        
free(pointer)    
    -> Receives pointer to dynamic memory 
       Deallocates the memory 
       ie give back the memory to operating system 


realloc(oldPointerToDynamicMemory, newSizeOfBlocks * numberOfBytesPerBlock)
    -> receives two arguments 
        first one -> pointer to the already created dynamic array 
        second one -> new size for reallocation 
        
    -> returns void* one block address

    reallocation by preserving old data 
        
    Will Do:
    1. copies data of dynamic array pointed by "oldPointerToDynamicMemory" to buffer
    2. free(oldPointerToDynamicMemory)
    3. malloc/calloc for newSize 
    4. if newSize > oldSize 
        "oldSize" number of data will be copied to "oldSize" new blocks 
        newSize-oldSize extra blocks will take default values 
       if newSize < oldSize 
        "newSize" number of data will be copied to "newSize" new blocks 
========================================================    
double ptr = (double*)calloc(5,sizeof(double))
ptr=realloc(ptr,7*sizeof(double))


========================================================
https://www.geeksforgeeks.org/g-fact-88/        
========================================================
    

1. Diff bt array and linked list 
    array           -> static structure / dy
                       random access 
                       operations on array: 
                            addition, deletion, modification 
                               O(N)      O(N)       O(1)
                       ::similarity:: sequential list, collection/container of data
    linked list     -> dynamic structure 
                       no-random access 
                            addition, deletion, modification
                                once we ve position 
                                O(1)    O(1)      O(1)
                        ::similarity:: sequential list, collection/container of data

2. Difference between stack and heap wrt memory 
   stack 
        storage for static memory 
        compiler will handle stack 
        stack memory is depending on the scope of the block / function 
        compiler's memory management 
   heap 
        storage for dynamic memory 
        programmer system calls using stdlib library malloc,calloc,realloc, free 
        scope throughout the program 
        comes under memory management

3. Memory leak 
   the pointer points to dynamic memory 
   if the pointing by the pointer is going to be changed, 
   we have to release the memory pointed by the pointer 
   before changing the pointing 
   
   otherwise, there may become memory leak 
   
   3.1 How will you fix the issue?
        calling stdlib library free function can fix the memory leak 
        
4. static variable 
   difference   global variable and static variable 
   global variable :  
         scope      throughout the program 
         visible    global to all the functions 
   static variable :  
         scope      throughout the program 
         visible    local to the function where it is defined 
   
   **********global variable**********
   #include<stdio.h>
    double salary = 3000.0;
    double maheshSalary(){
         salary += 500;
         
         return salary;
    }
    double trishalaSalary(){
         salary += 500;
         
         return salary;
    }    
    int main(){
        double sal = maheshSalary();
        printf("The salary is %.2lf\n",sal); // 3500
        sal = maheshSalary();
        printf("The salary is %.2lf\n",sal); // 4000
        sal = trishalaSalary();
        printf("The salary is %.2lf\n",sal); // 4500
        sal = trishalaSalary();
        printf("The salary is %.2lf\n",sal); // 5000
        
        return 0;
    }        

    ***********static variable**********
    #include<stdio.h>
    double maheshSalary(){
         static double salary = 3000.0;
         
         salary += 500;
         
         return salary;
    }
    double trishalaSalary(){
         static double salary = 3000.0;
         
         salary += 500;
         
         return salary;
    }
        
    int main(){
        double sal = f();
        printf("The salary is %.2lf\n",sal); // 3500
        sal = f();
        printf("The salary is %.2lf\n",sal); // 4000
        sal = g();
        printf("The salary is %.2lf\n",sal); // 3500
        sal = g();
        printf("The salary is %.2lf\n",sal); // 4000
        return 0;
    }        
        
!!!Vishal        
5. DMA - Dynamic Memory Allocation 
    runtime 
        manages the memory properly 
    stdlib functions malloc, calloc, realloc, free 
        malloc - non contiguos memory "not like array"
        calloc - contiguos memory "like array"
            two params: 
                first:  no of blocks -> contiguous
                second: no of bytes  -> contiguous
        realloc - two params 
            - first: allocated pointer 
            - second: no of bytes we want to change 
            oldMemory is less newMemory 
            80                      100             memcpy  will happen for 80 blocks
            80 bytes will deallocated       !!!Mahesh
            100 new bytes will allocated    !!!Mahesh
            100                     80              memcpy  will happen for 80 blocks
            
                
                
            | salaries1 100 blocks |    salaries2 120 blocks | 
             salaries1 new size 400 blocks 
             double* salaries1 = (double*)malloc(100*sizeof(double));
             
             
             //....
             salaries1 = (double*)realloc(salaries1, 400*sizeof(double));
             /*
             **********realloc**********
                void* temp = salaries1;
                salaries1 = (double*)malloc(400*sizeof(double));
                memcpy temp into salaries1 
                free(temp);
             */
         free - call free to release the memory out of malloc, calloc, realloc 
                to avoid memory leak 
            
                
                
             
    
    
    