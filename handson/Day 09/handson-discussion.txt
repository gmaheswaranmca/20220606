------------------------------------------------------
Expected Output for the given Input
Input: 40 12 30 18 15 34 20 36 43 10
Output: 10 43 12 40 15 36 18 34 20 30
------------------------------------------------------
Your understanding
------------------------------------------------------
void arrange(int size, short numbers[], short result[]){
	//CODE HERE
}
------------------------------------------------------

=====================================================================
Solution from "Sai Ram Challa"
Input: 40 12 30 18 15 34 20 36 43 10
Output: 10 43 12 40 15 36 18 34 20 30
=====================================================================
#define MAX_SIZE 100
#include<stdio.h>
#include<stdlib.h>
void swap(short *first, short *second){
  short t = (*first);
  (*first) = (*second);
  (*second) = t;
}
void arrange(int size, short numbers[], short result[])
{
  
    for(int i = 0; i<size-1; i++)
     for(int j = i+1; j<size;j++)
       if(numbers[i]>numbers[j])
          swap(&numbers[i], &numbers[j]);
  
   int k = 0;
   int i, j;
   for(i=0, j=size-1;i<j;i++,j--)
   {
      
       result[k++]=numbers[i];
       result[k++]=numbers[j];
   }
   if(i == j)
       result[k] = numbers[i];
}
void printNumbers(int size, short numbers[]){
    for(int i = 0; i<size; i++){
		printf("%hd ", numbers[i]);
	}
	printf("\n");
}

int main(){
   short numbers[MAX_SIZE] = {40, 12, 30, 18, 15, 34, 20, 36, 43, 10};
   int size = 10;
   short result[MAX_SIZE] = {};
   printf("Before arrangement numbers are:\n");
   printNumbers(size,numbers);
   arrange(size,numbers,result);  	
   printf("After arrangement numbers are:\n");
   printNumbers(size,result);
   return EXIT_SUCCESS;
}

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
$ gcc arrange_numbers.c -o arrange_numbers
$ ./arrange_numbers 
Before arrangement numbers are:
40 12 30 18 15 34 20 36 43 10 
After arrangement numbers are:
10 43 12 40 15 36 18 34 20 30 
$ 

=====================================================================

//assumption is numbers is sorted 
//alternate

int i=0, j=size-1;
for(int k=0;k<size;k++)
{
  if(k % 2 ==0){
      result[k]=numbers[i++];
  }else{
      result[k]=numbers[j--];
  }
}


=====================================================================
Alternate Solution for Arrangement 
    Full Code:
=====================================================================
#define MAX_SIZE 100
#include<stdio.h>
#include<stdlib.h>
void swap(short *first, short *second){
  short t = (*first);
  (*first) = (*second);
  (*second) = t;
}
void arrange(int size, short numbers[], short result[])
{
   //numbers = 40 12 30 18 15 34 20 36 43 10
   //sorting  used selection (legacy)
    for(int i = 0; i<size-1; i++)
     for(int j = i+1; j<size;j++)
       if(numbers[i]>numbers[j])
          swap(&numbers[i], &numbers[j]);
   //numbers = 10 12 15 18 20 30 34 36 40 43
   //                       j  i
   //result: 10 43 12 40 15 36 18 34 20 30
   //                                      k=10
   int i=0, j=size-1;
	for(int k=0;k<size;k++)
	{
	  if(k % 2 ==0){
		  result[k]=numbers[i++];
	  }else{
		  result[k]=numbers[j--];
	  }
	}
}
void printNumbers(int size, short numbers[]){
    for(int i = 0; i<size; i++){
		printf("%hd ", numbers[i]);
	}
	printf("\n");
}

int main(){
   short numbers[MAX_SIZE] = {40, 12, 30, 18, 15, 34, 20, 36, 10};
   int size = 9;
   short result[MAX_SIZE] = {};
   printf("Before arrangement numbers are:\n");
   printNumbers(size,numbers);
   arrange(size,numbers,result);  	
   printf("After arrangement numbers are:\n");
   printNumbers(size,result);
   return EXIT_SUCCESS;
}
=====================================================================



I am maheswaran and working as trainer cum developer for last twenty plus years.
1 2   3          4   5       6  7      8    9        10  11   12     13   14  


---------------------------------------------------------------------------
Question:
    Based on given index associated with the words, arrange the words to form the sentence.
---------------------------------------------------------------------------
Input 
size=14
maheswaran          3
working             5
and                 4
trainer             7
developer           9
for                 10
cum                 8
twenty              12
years               14
plus                13
as                  6
I                   1
am                  2
last                11
Output:
I am maheswaran and working as trainer cum developer for last twenty plus years.
---------------------------------------------------------------------------

#define MAX_SIZE 100
#include<stdio.h>
#include<stdlib.h>

struct _WordIndex{
    char word[256];
    int index;
};
typedef struct _WordIndex WordIndex;

void swap(WordIndex *first, WordIndex *second){ //first -> {"maheswaran", 3}, 
    //second -> {"working", 5}
  WordIndex t = (*first);
  (*first) = (*second);
  (*second) = t;
}
int main(){
    int size=14;
    WordIndex wordindices[MAX_SIZE]={
{"maheswaran",          3},
{"working",             5},
{"and",                 4},
{"trainer",             7},
{"developer",           9},
{"for",                 10},
{"cum",                 8},
{"twenty",              12},
{"years",               14},
{"plus",                13},
{"as",                  6},
{"I",                   1},
{"am",                  2},
{"last",                11}};
    
    //printf("Enter size of the sentence:"); scanf("%d",&size);
    /*printf("Enter word and its index one by one:\n");
    for(int I=0; I < size; I++){
        printf("Enter word:"); scanf("%s",wordindices[I].word);
        printf("Enter index associated:"); scanf("%d",&wordindices[I].index);
    }*/
    //Arrangement 
    printf("Before arrangement:\n");
    for(int I=0; I < size; I++){
        printf("%s ",wordindices[I].word);
    }
    printf("\n");
    //Sort Based index 
     for(int i = 0; i<size-1; i++)
        for(int j = i+1; j<size;j++)
            if(wordindices[j].index < wordindices[i].index)
                swap(&wordindices[i], &wordindices[j]);
    //Arrangement 
    printf("After arrangement:\n");
    for(int I=0; I < size; I++){
        printf("%s ",wordindices[I].word);
    }
    printf("\n");
}
---------------------------------------------------------------------------



---------------------------------------------------------------------------
I am maheswaran
1 2  3
---------------------------------------------------------------------------
Without sorting
    how to arrange the words as the sentence
---------------------------------------------------------------------------
#define MAX_SIZE 100
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct _WordIndex{
    char word[256];
    int index;
};
typedef struct _WordIndex WordIndex;

void swap(WordIndex *first, WordIndex *second){
  WordIndex t = (*first);
  (*first) = (*second);
  (*second) = t;
}
int main(){
    int size=14;
    WordIndex wordindices[MAX_SIZE]={
{"maheswaran",          3},
{"working",             5},
{"and",                 4},
{"trainer",             7},
{"developer",           9},
{"for",                 10},
{"cum",                 8},
{"twenty",              12},
{"years",               14},
{"plus",                13},
{"as",                  6},
{"I",                   1},
{"am",                  2},
{"last",                11}};
    
    printf("Enter size of the sentence:"); scanf("%d",&size);
    printf("Enter word and its index one by one:\n");
    for(int I=0; I < size; I++){
        char word[256];
        int index;
        printf("Enter word:"); scanf("%s",word);
        printf("Enter index associated:"); scanf("%d",&index);
        strcpy(wordindices[index-1].word,word);
        wordindices[index-1].index = index;
    }
    /*	
    //Arrangement 
    printf("Before arrangement:\n");
    for(int I=0; I < size; I++){
        printf("%s ",wordindices[I].word);
    }
    printf("\n");
    //Sort Based index 
     for(int i = 0; i<size-1; i++)
        for(int j = i+1; j<size;j++)
            if(wordindices[j].index < wordindices[i].index)
                swap(&wordindices[i], &wordindices[j]);
    */
    //Arrangement 
    printf("After arrangement:\n");
    for(int I=0; I < size; I++){
        printf("%s ",wordindices[I].word);
    }
    printf("\n");
}
---------------------------------------------------------------------------



















