
--------------------------------------------------------------
void swap(SLL_node_t* firstAddr, SLL_node_t* secondAddr){
    SLL_node_t temp = (*firstAddr);
    (*firstAddr) = (*secondAddr);
    (*secondAddr) = temp;
}

SLL_node_t nodes[1024];
//
scanf("%lf",&nodes[I].data); //I<- 1 .. N

for(int I=0; I<N-1; I++)
	for(int J=I+1; J<N; J++)
		if(nodes[J].data < nodes[I].data)
			swap(&nodes[I],&nodes[J]);
--------------------------------------------------------------

Linked List (user-defined)
	-Sequencial List 
		Sequence of data nodes 
			each node is connected next node to form the list - singly linked list 
				list will have frontPtr (head)
				if last node's next is the head - circular singly liked list 
			each node is connected next node and prev node to form the list - doubly linked list (DLL)
				list will have frontPtr (head),backPtr(tail)
				if last node's next is the head 
				   first node's prev is the tail 	
						- circular doubly liked list 
	-Not internal structure 
	-if C++, we will have "forward_list", "list" in the STL containers 
	-not "random-accessed"
	
	-DLL -> 
		addition / deletion at head, tail or middle will take O(1) 
		to search the data(worst-case): O(N)
-------------------------------------------------------------
Singly Linked List
	{
		frontAddr 
		sequence of nodes{data, nextNodeAddr}
	}
	10 20 30 40 50 	
						front[x]
	
	Add Front 10 		front[.]-> [10,x]
    Add Front 20 		front[.]->[10,x]
                        [20,x]                        
                        //
                        front[.] ->      [10,x]
                           [20,.]->
                        //
                        front[.]->[20,.]->[10,x]
                                
	Add Front 20 		front[.]-> [20,.]->[10,x]	
	Add Front 30 		front[.]-> [30,.]->[20,.]->[10,x]	
	Add Front 40 		front[.]-> [40,.]->[30,.]->[20,.]->[10,x]	
	Add Front 50 		front[.]-> [50,.]->[40,.]->[30,.]->[20,.]->[10,x]	
	
	Delete Front 		front[.]-> [40,.]->[30,.]->[20,.]->[10,x]		50 is deleted 
	Delete Front 		front[.]-> [30,.]->[20,.]->[10,x]		40 is deleted 
	....
						
-------------------------------------------------------------
Doubly Linked List
	{
		frontAddr 
		backAddr
		sequence of nodes{prevNodeAddr, data, nextNodeAddr}
	}
-------------------------------------------------------------	


-------------------------------------------------------------
Implemnet Singly Linked List(User-Defined) of salaries (double)
    push_front  -> add at front 
    pop_front   -> delete at front 
    front       -> data at front 
    
    traversal -> forward 
    
    traversalRecursion -> forward 
    traversalRecursion -> backward 
------------------------------------------------------------- 
#include<stdio.h>
#include<stdlib.h>

struct _SLL_node_t;
typedef struct _SLL_node_t SLL_node_t;
struct _SLL_node_t{
    double data;
    SLL_node_t *nextNodeAddr;
};

int main(){
    return EXIT_SUCCESS;
}
-------------------------------------------------------------


-------------------------------------------------------------
Discuss "list_traversal_recursion_forward"
    how recursion is working 
-------------------------------------------------------------    
void list_traversal_recursion_forward(SLL_node_t* nodeAddr){
    if(nodeAddr == NULL){
        return;
    }
    printf("%.2lf ->",nodeAddr->data);
    list_traversal_recursion_forward(nodeAddr->nextNodeAddr);
}
-------------------------------------------------------------
Let list_traversal_recursion_forward      =  f
		
    Input Data: 50 40 30 20 10 
    List: 10->20->30->40->50x

main()    
    f([10])    
        f([20])
            f([30])
                f([40])
                   f([50])
                       f([x])
10.00 ->  20.00 ->  30.00 -> 40.00 -> 50 
Ended the function stack calls 
-------------------------------------------------------------

void list_traversal_recursion_backward(SLL_node_t* nodeAddr){
    if(nodeAddr == NULL){
        return;
    }
    
    list_traversal_recursion_forward(nodeAddr->nextNodeAddr);
    printf("%.2lf ->",nodeAddr->data);
}        
-------------------------------------------------------------
Let list_traversal_recursion_backward      =  f
		
    Input Data: 50 40 30 20 10 
    List: 10->20->30->40->50x
    
main()
        f([10])
            f([20])
                f([30])
                    f([40])
                        f([50])
                            f([x])
    
    
50 ->  40 ->  30 ->   20 -> 10 -> 

Ended the functions stack calls   
-------------------------------------------------------------  








-------------------------------------------------------------
Implemented tested code
    Singly Linked List(User-Defined) of salaries (double)
    push_front  -> add at front 
    pop_front   -> delete at front 
    front       -> data at front 
    
    traversal -> forward 
    
    traversalRecursion -> forward 
    traversalRecursion -> backward 
-------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>

struct _SLL_node_t;
typedef struct _SLL_node_t SLL_node_t;
struct _SLL_node_t{
    double data;
    SLL_node_t* nextNodeAddr;
};

void node_init(SLL_node_t* nodeAddr, double val){
    nodeAddr->data = val;
    nodeAddr->nextNodeAddr = NULL;
}

struct _singly_list_t;
typedef struct _singly_list_t singly_list_t;

struct _singly_list_t{
    SLL_node_t* frontNodeAddr;
};

void list_pop_front(singly_list_t* listAddr);
double list_front(singly_list_t* listAddr);

void list_init(singly_list_t* listAddr){
    listAddr->frontNodeAddr = NULL;
}

void list_destroy(singly_list_t* listAddr){
     while(listAddr->frontNodeAddr != NULL){
         //printf("%.2lf is being deleted....\n",list_front(listAddr));
         list_pop_front(listAddr);
     }
     listAddr->frontNodeAddr = NULL;
}

void list_push_front(singly_list_t* listAddr, double val){
    SLL_node_t* nodeAddr = (SLL_node_t*)malloc(1 * sizeof(SLL_node_t));
    node_init(nodeAddr,val); //{val,NULL}
    
    if(listAddr->frontNodeAddr == NULL){
        listAddr->frontNodeAddr = nodeAddr;
    }else{
        nodeAddr->nextNodeAddr = listAddr->frontNodeAddr; // bring the new node before the old list
        listAddr->frontNodeAddr = nodeAddr; // change the list front pointer 
    }
}
void list_pop_front(singly_list_t* listAddr){
    if(listAddr->frontNodeAddr == NULL){
        printf("List is empty.\n");
        return;
    }
    SLL_node_t* nodeAddr = listAddr->frontNodeAddr;
    
    //ADJUSTMENT 
    listAddr->frontNodeAddr = listAddr->frontNodeAddr->nextNodeAddr;
    
    //Deallocator
    nodeAddr->nextNodeAddr = NULL;
    free(nodeAddr);
    nodeAddr = NULL;
}
double list_front(singly_list_t* listAddr){
    if(listAddr->frontNodeAddr == NULL){
        printf("List is empty.\n");
        return -1.0;
    }
    return listAddr->frontNodeAddr->data;
}

//
void list_traversal(singly_list_t* listAddr){
    SLL_node_t* nodeAddr = listAddr->frontNodeAddr;
    printf("The salaries are:\n");
    while(nodeAddr != NULL){
        printf("%.2lf ->",nodeAddr->data);
        nodeAddr = nodeAddr->nextNodeAddr;
    }
    printf("\n");
}

//
void list_traversal_recursion_forward(SLL_node_t* nodeAddr){
    if(nodeAddr == NULL){
        return;
    }
    printf("%.2lf ->",nodeAddr->data);
    list_traversal_recursion_forward(nodeAddr->nextNodeAddr);
}

void list_traversal_recursion_backward(SLL_node_t* nodeAddr){
    if(nodeAddr == NULL){
        return;
    }
    
    list_traversal_recursion_backward(nodeAddr->nextNodeAddr);
    printf("%.2lf ->",nodeAddr->data);
}


int main(){
    singly_list_t list;
    list_init(&list);
    
    int menu;
    do{
        printf("Pick Choice\n");
        printf("\t1-Add Front, 2-Delete Front\n");
        printf("\t3-Traversal\n");
        printf("\tRecursion next 4-Traversal Forward, 5-Traversal Backward\n");
        printf("\t0-Exit\n");
        printf("Your Choice:"); scanf("%d",&menu);
        
        if(1 == menu){
            double salary = 0.0;
            printf("Enter data:"); scanf("%lf",&salary);
            list_push_front(&list, salary);
        }else if(2 == menu){
            if(list.frontNodeAddr == NULL){
                printf("List is empty.\n");
            }else{
                double salary = list_front(&list);
                list_pop_front(&list);
                printf("%.2lf is Deleted.\n",salary);
            }
        }else if(3 == menu){
            list_traversal(&list);
        }else if(4 == menu){
            printf("The salaries are:\n");
            list_traversal_recursion_forward(list.frontNodeAddr);
            printf("\n");
        }else if(5 == menu){
            printf("The reverse of the salaries are:\n");
            list_traversal_recursion_backward(list.frontNodeAddr);
            printf("\n");
        }else{
            printf("Application is shutting down....\n");    
        }
    }while((1 <= menu) && (menu <= 5));
    
    list_destroy(&list);
    return EXIT_SUCCESS;
}
-------------------------------------------------------------
    10 20 30 40 50
    
    [.]->10 -> <- 20 -> <- 30 -> <- 40 -> <- 50 <-[.]
                        front[x] [x]bac
	Add Back 10 		front[.]-> [x,10,x] <-[.]back
    Add Back 20 		front[.]-> [x,10,.]-> <-[.,20,x]<-[.]back    1.construct node [x,20,x] "back -> next = node;node->prev = back;back = node"
    Add Back 30 		front[.]-> [x,10,.]-> <-[.,20,.]-> <-[.,30,x]<-[.]back
	Add Back 40 		front[.]-> [x,10,.]-> <-[.,20,.]-> <-[.,30,.]-> <-[.,40,x]<-[.]back                                  
	Add Back 50 		front[.]-> [x,10,.]-> <-[.,20,.]-> <-[.,30,.]-> <-[.,40,.]-> <-[.,50,x]<-[.]back  
	
	Delete Back 		front[.]-> [x,10,.]-> <-[.,20,.]-> <-[.,30,.]-> <-[.,40,.]-> <-[.,50,x]<-[.]back
                        node = back
                        
                        {back->prev->next = null;
                        back = back->prev} back->prev!=null otherwise 
                        back = null front=null
                        
                        delete node 
	Delete Back 		
	....
-------------------------------------------------------------	


-------------------------------------------------------------
Doubly Linked List (user-defined)
    Initial Code 
    
Day Assignment: Complete the list_push_front, list_push_back, list_pop_front, list_pop_back    
-------------------------------------------------------------

#include<stdio.h>
#include<stdlib.h>

struct _DLL_node_t;
typedef struct _DLL_node_t DLL_node_t;
struct _DLL_node_t{
    DLL_node_t* prevNodeAddr;
    double data;
    DLL_node_t* nextNodeAddr;
};

void node_init(DLL_node_t* nodeAddr, double val){
    nodeAddr->prevNodeAddr = NULL;
    nodeAddr->data = val;
    nodeAddr->nextNodeAddr = NULL;
}

struct _doubly_list_t;
typedef struct _doubly_list_t doubly_list_t;

struct _doubly_list_t{
    DLL_node_t* frontNodeAddr;
    DLL_node_t* backNodeAddr;
};

void list_pop_front(doubly_list_t* listAddr);
double list_front(doubly_list_t* listAddr);

void list_init(doubly_list_t* listAddr){
    listAddr->frontNodeAddr = NULL;
    listAddr->backNodeAddr = NULL;
}

void list_destroy(doubly_list_t* listAddr){
     while(listAddr->frontNodeAddr != NULL){
         //printf("%.2lf is being deleted....\n",list_front(listAddr));
         list_pop_front(listAddr);
     }
     listAddr->frontNodeAddr = NULL;
     listAddr->backNodeAddr = NULL;
}

void list_push_front(doubly_list_t* listAddr, double val){
    DLL_node_t* nodeAddr = (DLL_node_t*)malloc(1 * sizeof(DLL_node_t)); 
    node_init(nodeAddr,val); //{val,NULL}
    
    //ADJUST
    //CODE HERE
}
void list_pop_front(doubly_list_t* listAddr){
    if(listAddr->frontNodeAddr == NULL){
        printf("List is empty.\n");
        return;
    }
    DLL_node_t* nodeAddr = listAddr->frontNodeAddr;
    
    //ADJUSTMENT 
    //CODE HERE
    
    //Deallocator
    nodeAddr->nextNodeAddr = NULL;         
    free(nodeAddr);                        
    nodeAddr = NULL;
}
double list_front(doubly_list_t* listAddr){
    if(listAddr->frontNodeAddr == NULL){
        printf("List is empty.\n");
        return -1.0;
    }
    return listAddr->frontNodeAddr->data;
}

void list_push_back(doubly_list_t* listAddr, double val){
    DLL_node_t* nodeAddr = (DLL_node_t*)malloc(1 * sizeof(DLL_node_t)); 
    node_init(nodeAddr,val); //{val,NULL}
    
    //ADJUST
    //CODE HERE
}
void list_pop_back(doubly_list_t* listAddr){
    if(listAddr->backNodeAddr == NULL){
        printf("List is empty.\n");
        return;
    }
    DLL_node_t* nodeAddr = listAddr->backNodeAddr;
    
    //ADJUSTMENT 
    //CODE HERE
    
    //Deallocator
    nodeAddr->prevNodeAddr = NULL;         
    free(nodeAddr);                        
    nodeAddr = NULL;
}
double list_back(doubly_list_t* listAddr){
    if(listAddr->backNodeAddr == NULL){
        printf("List is empty.\n");
        return -1.0;
    }
    return listAddr->backNodeAddr->data;
}

//
void list_traversal_forward(doubly_list_t* listAddr){
    DLL_node_t* nodeAddr = listAddr->frontNodeAddr;
    printf("The salaries are:\n");
    while(nodeAddr != NULL){
        printf("%.2lf ->",nodeAddr->data);
        nodeAddr = nodeAddr->nextNodeAddr;
    }
    printf("\n");
}
void list_traversal_backward(doubly_list_t* listAddr){
    DLL_node_t* nodeAddr = listAddr->backNodeAddr;
    printf("The reverse of salaries are:\n");
    while(nodeAddr != NULL){
        printf("%.2lf ->",nodeAddr->data);
        nodeAddr = nodeAddr->prevNodeAddr;
    }
    printf("\n");
}
void list_traversal_next_recursion_forward(DLL_node_t* nodeAddr){
    if(nodeAddr == NULL){
        return;
    }
    printf("%.2lf ->",nodeAddr->data);
    list_traversal_next_recursion_forward(nodeAddr->nextNodeAddr);
}

void list_traversal_next_recursion_backward(DLL_node_t* nodeAddr){
    if(nodeAddr == NULL){
        return;
    }
    
    list_traversal_next_recursion_backward(nodeAddr->nextNodeAddr);
    printf("%.2lf ->",nodeAddr->data);
}
void list_traversal_prev_recursion_backward(DLL_node_t* nodeAddr){
    if(nodeAddr == NULL){
        return;
    }
    printf("%.2lf ->",nodeAddr->data);
    list_traversal_prev_recursion_backward(nodeAddr->prevNodeAddr);
}

void list_traversal_prev_recursion_forward(DLL_node_t* nodeAddr){
    if(nodeAddr == NULL){
        return;
    }
    
    list_traversal_prev_recursion_forward(nodeAddr->prevNodeAddr);
    printf("%.2lf ->",nodeAddr->data);
}

int main(){
    doubly_list_t list;
    list_init(&list);
    
    int menu;
    do{
        printf("Pick Choice\n");
        printf("\t1-Add Front, 2-Delete Front\n");
        printf("\t3-Add Back, 4-Delete Back\n");
        printf("\t5-Traversal Forward,6-Traversal Backward\n");
        printf("\tRecursion next 7-Traversal Forward, 8-Traversal Backward\n");
        printf("\tRecursion prev 9-Traversal Forward, 10-Traversal Backward\n");
        printf("\t0-Exit\n");
        printf("Your Choice:"); scanf("%d",&menu);
        
        if(1 == menu){
            double salary = 0.0;
            printf("Enter data:"); scanf("%lf",&salary);
            list_push_front(&list, salary);
        }else if(2 == menu){
            if(list.frontNodeAddr == NULL){
                printf("List is empty.\n");
            }else{
                double salary = list_front(&list);
                list_pop_front(&list);
                printf("%.2lf is Deleted.\n",salary);
            }
        }else if(3 == menu){
            double salary = 0.0;
            printf("Enter data:"); scanf("%lf",&salary);
            list_push_back(&list, salary);
        }else if(4 == menu){
            if(list.frontNodeAddr == NULL){
                printf("List is empty.\n");
            }else{
                double salary = list_back(&list);
                list_pop_back(&list);
                printf("%.2lf is Deleted.\n",salary);
            }
        }else if(5 == menu){
            list_traversal_forward(&list);
        }else if(6 == menu){
            list_traversal_backward(&list);
        }else if(7 == menu){
            printf("The salaries are:\n");
            list_traversal_next_recursion_forward(list.frontNodeAddr);
            printf("\n");
        }else if(8 == menu){
            printf("The reverse of the salaries are:\n");
            list_traversal_next_recursion_backward(list.frontNodeAddr);
            printf("\n");
        }else if(9 == menu){
            printf("The salaries are:\n");
            list_traversal_prev_recursion_forward(list.backNodeAddr);
            printf("\n");
        }else if(10 == menu){
            printf("The reverse of the salaries are:\n");
            list_traversal_prev_recursion_backward(list.backNodeAddr);
            printf("\n");
        }else{
            printf("Application is shutting down....\n");    
        }
    }while((1 <= menu) && (menu <= 10));
    
    list_destroy(&list);
    return EXIT_SUCCESS;
}		