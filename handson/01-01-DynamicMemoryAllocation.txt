----------------------------------------
Dynamic Memory Allocation 
	header <stdlib.h>
----------------------------------------
	1. heap allocator by using DMA functions of header <stdlib.h>
	2. stack allocator by compiler 
----------------------------------------

=====================================================================================
Dynamic Memory Allocation 
	functions
=====================================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. malloc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Syntax:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
void* malloc( size_t size );
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	!!! Allocates "size" bytes of 'uninitialized storage'.
	
	1. If allocation succeeds, returns the pointer to the beginning of newly allocated memory
	2. otherwise, NULL pointer
	
Point:	
	To avoid a memory leak, the returned pointer must be deallocated with free()
	
Point:
	malloc is thread-safe
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2. calloc 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Syntax: 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
void* calloc( size_t num, size_t size );
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	!!!Allocates memory for an array of "num" objects of "size" and 
		initializes all bytes in the allocated storage to zero.

	1. If allocation succeeds, returns a pointer of the allocated memory 
	2. otherwise, NULL pointer
	
Point:		
	To avoid a memory leak, the returned pointer must be deallocated with free()	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
3. free 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Point
	To avoid a memory leak, we call "free" to "deallocate" of "allocated memory"

Syntax: 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
void free( void* ptr );
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	!!!Deallocates the space previously allocated 
		by 
			malloc(), 
			calloc(), 
			aligned_alloc(), (since C11) or 
			realloc()

	a. If ptr is a null pointer, the function does nothing.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	


			
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
4.realloc 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Syntax:				
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	void *realloc( void *ptr, size_t new_size );
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	!!! Reallocates the given area of memory. 
	Note:
		It must be previously allocated by malloc(), calloc() or realloc() and 
		'not yet freed' with a call to free or realloc. 
		Otherwise, the results are undefined.
		
reallocation is by 
1. a. expanding or contracting the existing area pointed to by "ptr", 'if possible'. 
   b. The contents of the area remain unchanged up to the lesser of the new and old sizes. 
   c. If the area is expanded, the contents of the new part of the array are undefined	
2. 	a. allocating a new memory block of size "new_size" bytes, 
	b. copying memory area with size equal the lesser of the new and the old sizes, and 
	c. freeing the old block.
	d. If the area is expanded, the contents of the new part of the array are undefined	
   
Point:   
	To avoid a memory leak, the returned pointer must be deallocated with free()

Point:	
	If there is not enough memory, 
		the old memory block is not freed and 
		null pointer is returned		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
=====================================================================================

=====================================================================================
Difference between malloc and calloc 
=====================================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
malloc 								callac
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. syntax
void* malloc( size_t size );		void free( void* ptr );

2. takes one argument 				takes two arguments

3. Allocates "size" bytes 			Allocates memory for an array of "num" objects of "size" and 
of 'uninitialized storage'. 		initializes all bytes in the allocated storage to zero.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=====================================================================================


=====================================================================================
Tell about "realloc"		
=====================================================================================
Syntax:void *realloc( void *ptr, size_t new_size );
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1. Reallocates the given area of memory. 
2. It must be previously allocated by malloc(), calloc() or realloc() and 
'not yet freed' with a call to free or realloc. 
3. Takes arguments 
	ptr	-	pointer to the memory area to be reallocated
	new_size	-	new size of the array in bytes
4. returns the pointer to the beginning of newly allocated memory 
5. Reallocation is by 
	i. a. expanding or contracting the existing area pointed to by "ptr", 'if possible'. 
	   b. The contents of the area remain unchanged up to the lesser of the new and old sizes. 
	   c. If the area is expanded, the contents of the new part of the array are undefined	
	ii. a. allocating a new memory block of size "new_size" bytes, 
		b. copying memory area with size equal the lesser of the new and the old sizes, and 
		c. freeing the old block.
		d. If the area is expanded, the contents of the new part of the array are undefined	
6. To avoid a memory leak, 
	the returned pointer must be deallocated with free()
7. If there is not enough memory, 
   the old memory block is not freed and 
   null pointer is returned
6. realloc is thread-safe  
=====================================================================================

