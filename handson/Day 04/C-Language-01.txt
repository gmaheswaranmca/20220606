Resources 
	1) https://en.cppreference.com/w/
	
	2) https://cplusplus.com/

-----------------------------------------------
C Language 
	standard -> Specifications 
	implementation of the standard -> The compiler will implment the standard
-----------------------------------------------
C Language 
		Procedural High Level Programming Language 
		- - - - OOPs
		
		Procedural
			- Modularization 
				Code into multiple modules 
					Each module has two 
						header -> declrations 
						source -> definitions 
			- Abstraction 
-----------------------------------------------		
Language Elements of C 
-----------------------------------------------		
	1. Variables 
		Identifiers: 
			Names given to the programming elements 
			such as variables (const), functions, datat types
			
			Names: starts with "letter or underscore" followed by "letter digit underscore"
	2. Keywords 
		Reserved words in the C 
	3. Constants (Literals) 
		int firstNumber=100; //yes
		double salary=1000.0; //yes 
		float average = 85.3; //yes -> something wrong 
		float average = 85.3f; //yes -> valid

		Suffix		Type modifier
		u or U		unsigned
		l or L		long
		ll or LL	long long		
		
		f or F		float
		l or L		long double
		long long indianProjectDigitalIndia = 1000000000000LL;//1,00,000,00,00,000 INR 1 Lac Crores 
	4. Data Types 
		to qualify the variable for knowing data range 
		Primitive Types 
			char 			"signed" "unsigned" 	-> to hold a single byte "char" 
													-> to hold a single byte number
			int 			"signed" "unsigned" 		"short" "long" "long long" 
				-> to hold integer numbers 
			float double 			"long double"
				-> to hold floating point numbers
			void 		-> for function return type / argument
			void* 		-> for generic pointers 
		Derived Types 
			User (Programmer) Defined Types 
				struct 
				union 
				enum 
			pointer 
				type* 
			arrays
			functions 
	5. Operators
		assignment	
			a = b
			a += b
			a -= b
			a *= b
			a /= b
			a %= b          // only for integers
			a &= b
			a |= b
			a ^= b
			a <<= b
			a >>= b
		increment
		decrement	
			++a
			--a
			a++
			a--
		arithmetic	
			+a
			-a
			a + b
			a - b
			a * b
			a / b
			a % b
			~a
			a & b
			a | b
			a ^ b
			a << b
			a >> b
		logical	
			!a
			a && b
			a || b
		comparison	
			a == b
			a != b
			a < b
			a > b
			a <= b
			a >= b
		member
		access	
			a[b]
			*a
			&a
			a->b
			a.b
		other
			a(...)
			a, b
			(type) a
			? :
			sizeof
			_Alignof (since C11)	
-----------------------------------------------
Print Size of Types:
-----------------------------------------------
#include<stdio.h>
int main(){
	printf("\nchar size %lu",sizeof(char));
	printf("\nshort size %lu",sizeof(short));
	printf("\nint size %lu",sizeof(int));
	printf("\nlong size %lu",sizeof(long));
	printf("\nlong long size %lu",sizeof(long long));
	printf("\nfloat size %lu",sizeof(float));
	printf("\ndouble size %lu",sizeof(double));
	printf("\nlong double size %lu",sizeof(long double));
    printf("\nvoid* size %lu",sizeof(void*));
    printf("\nint* size %lu",sizeof(int*));
    printf("\ndouble* size %lu",sizeof(double*));
	return 0;
}
-----------------------------------------------
char size 1
short size 2
int size 4
long size 8
long long size 8
float size 4
double size 8
long double size 16
void* size 8
int* size 8
double* size 8
-----------------------------------------------

//NOT INITIALIZED -> garbage -> any value -> default value -> no default value 
By default, local variable (to function) [declaration] definition is "auto" storage specifier
-----------------------------------------------


-----------------------------------------------	
//Write a program to read scheme object/record details such as scheme name, max_loan_amount, interest rate, duration_in_months
//Print on the console
/*
	scheme_name
	max_loan_amount
	interest_rate
	duration_in_months
*/
#include<stdio.h>
int main(){
	char scheme_name[256]="";
	auto double max_loan_amount=0.0; 
	float interest_rate=0.0f;
	int duration_in_months=0;

	printf("\nEnter Schmen Name:"); 
	scanf("%s",scheme_name);
	printf("\nEnter Maximum Loan Amount:"); 
	scanf("%lf",&max_loan_amount);
	printf("\nEnter Interest Rate:"); 
	scanf("%f",&interest_rate);
	printf("\nEnter Duration in Months:"); 
	scanf("%d",&duration_in_months);

	printf("\nSchmen Name:%s",scheme_name);
	printf("\nMaximum Loan Amount:%lf",max_loan_amount);
	printf("\nInterest Rate:%.2f",interest_rate);
	printf("\nDuration in Months:%.2d",duration_in_months);
	return 0;
}	

-----------------------------------------------

-----------------------------------------------
1. Read your name and say hello for your name 
Example:
Input:
Maheswaran
Output:
Hello Maheswaran!!!!
-----------------------------------------------

-----------------------------------------------
2. Read two (double) salaries and find the sum of the salaries 
Example:
Input:
2000000
3000000
Output:
5000000.00
-----------------------------------------------

-----------------------------------------------
3. Read a choice along with two (unsigned short) ages 
Find sum(1), difference(2), product(3), quotient(4), remainder(5) of 
the operations addition, subtraction, multiplication,
division(quotient), division(remainder) 

Check the inputs which should not negative 
If negative Print "Invalid Ages"
Example:
Input:
Choice: 1
78
13
Output:
91
Input:
Choice: 4
78
13
Output:
6
Input:
Choice: 5
80
13
Output:
2
-----------------------------------------------
Format Specifiers:
-----------------------------------------------
    %d      int
    %f      float 
    %u      unsigned 
    %l      long 
    %ll     long long 
    %f      float 
    %lf     double 
    %c      char 
    %s      string 
-----------------------------------------------


-----------------------------------------------
Pre Test Responses for "C Programming" 
-----------------------------------------------

-----------------------------------------------
Exercise:
4.
Print the following pattern for given N
Example:
Input:
    N=4
Output: 
    4321
    44332211
    444333222111
    4444333322221111
Input:
    N=3
Output: 
    321
    332211
    333222111
-----------------------------------------------
-1      0-255 unsigned char 
-----------------------------------------------

-----------------------------------------------
Reading unsigned short int 
and Printing 
-----------------------------------------------
#include<stdio.h>
int main(){
	unsigned short age;
	printf("Enter your age:");
	scanf("%hu",&age);
	printf("\nGiven age is %hu",age);
	return 0;
}
-----------------------------------------------
Check for input: -1 Output: MAX_UNSIGNGED_SHORT 
Check for input: -2 Output: MAX_UNSIGNGED_SHORT-1
Check for input: -3 Output: MAX_UNSIGNGED_SHORT-2
-----------------------------------------------

-----------------------------------------------
Validation of age between 0 and 120
-----------------------------------------------
#include<stdio.h>
int main(){
	unsigned short age;
	printf("Enter your age:");//12 121
	scanf("%hu",&age);

	if(!(0 <= age && age <= 120)){ // 0 <= age <= 120
	//if(!(0 <= age <= 120)){ //0 <= age <= 120 -> 1 <= 120 	| 0 <= age <= 120 -> 1 <= 120 //Logical error
		printf("\nInvalid age.");
		return -1;
	}
	printf("\nGiven age is %hu",age);
	printf("\nThe age is valid.");
	return 0;
}

-----------------------------------------------
Storing high precision data into double/long double 
and printing we find some loss in the precison
What it is???????????
-----------------------------------------------
#include<stdio.h>
int main(){
	long double salary=100000.123456789123456789123456789;

	printf("%.27Lf",salary); //100000.123456789122428745031356812
	
	return 0;
}
-----------------------------------------------


a += b;
->
a = a + b; 

-----------------------------------------------
#include<stdio.h>
int main(){
	double firstSalary=0.0;
	double secondSalary=0.0;
	printf("Enter two salaries one by one:");
	scanf("%lf%lf",&firstSalary,&secondSalary);
	//double sumSalary = firstSalary + secondSalary; // replace the expression using "+="
	double sumSalary = 0.0;
	sumSalary += firstSalary; // sumSalary = sumSalary + firstSalary;
	sumSalary += secondSalary;// sumSalary = sumSalary + secondSalary;

	printf("%.2lf",sumSalary); 
	
	return 0;
}
-----------------------------------------------

-----------------------------------------------
A+=1;

A++;

Usage of increment / decrement operators
-----------------------------------------------
//Forward Traversal
for(int I=0; I < SIZE; I++){
}
//Same 
for(int I=0; I < SIZE; ++I){
} 
//Backward Traversal   
for(int I=SIZE-1; I >= 0; I--){
}
//Same 
for(int I=SIZE-1; I >= 0; --I){
}    
-----------------------------------------------

-----------------------------------------------
Difference between pre increment and post increment 
-----------------------------------------------
Let us assume
int I = 10;
Before going to discuss, we will understand:
I++;    //meaning of increment operator is I = I + 1;
        //After this statement I will become 11

int I = 10;
I+1;    //Just expression, the value of the evaluated expression is not updated back to the variable 
        //After this statement I is 10 only
-----------------------------------------------
int I = 10;
int A;
int B;
int C;
int D;

A = I++; //post increment:value then increment  equals A=I; I=I+1;  // A=10 and I=11
B = ++I; //pre increment:increment then value   equals I=I+1; B=I;   // I=12 and B=12 
C = I--; //post decrement:value then decrement  equals C=I; I=I-1;   // C=12 and I=11
D = --I; //pre decrement:decrement then value   equals I=I-1; D=I;   // I=10 and D=10

printf("A=%d B=%d C=%d D=%d I=%d\n",A,B,C,D,I);
-----------------------------------------------
#include<stdio.h>
int main(){
	int I = 10;
	int A;
	int B;
	int C;
	int D;

	A = I++; //post increment:value then increment  equals A=I; I=I+1;  // A=10 and I=11
	B = ++I; //pre increment:increment then value   equals I=I+1; B=I;   // I=12 and B=12 
	C = I--; //post decrement:value then decrement  equals C=I; I=I-1;   // C=12 and I=11
	D = --I; //pre decrement:decrement then value   equals I=I-1; D=I;   // I=10 and D=10

	printf("A=%d B=%d C=%d D=%d I=%d\n",A,B,C,D,I);
	
	return 0;
}
-----------------------------------------------

Will the below code work?
double I = 2.1;
I++;

Yes. This will work.

Increment/Decrement operators will work for floating point numbers data type as well.
-----------------------------------------------


1. Find area and circumference of the circle for given radius
2. Find area and circumference of the circle for given diameter
3. Find area and circumference of the square for given side
4. Find area and circumference of the rectangle for given length and breath
-----------------------------------------------



