Lab Additional Exercises:
	  
1. Find the difference between maximum and minimum of three given numbers 	  
	Example 
		10 2 3
		Max 10
		Min 2
		Diff is 8
----------------------------------------------------------		
#!/usr/bin/bash
echo "Enter first number:"
read FIRST_NUM
echo "Enter second number:"
read SECOND_NUM
echo "Enter third number:"
read THIRD_NUM

if [[ $FIRST_NUM -gt $SECOND_NUM ]] && [[ $FIRST_NUM -gt $THIRD_NUM ]]
then
	MAX_OF_NUMS=$FIRST_NUM
elif [[ $SECOND_NUM -gt $THIRD_NUM ]]
then
	MAX_OF_NUMS=$SECOND_NUM
else
	MAX_OF_NUMS=$THIRD_NUM
fi

if [[ $FIRST_NUM -lt $SECOND_NUM ]] && [[ $FIRST_NUM -lt $THIRD_NUM ]]
then
	MIN_OF_NUMS=$FIRST_NUM
elif [[ $SECOND_NUM -lt $THIRD_NUM ]]
then
	MIN_OF_NUMS=$SECOND_NUM
else
	MIN_OF_NUMS=$THIRD_NUM
fi

DIFF=$(($MAX_OF_NUMS - $MIN_OF_NUMS))
echo "Diff of max $MAX_OF_NUMS and min $MIN_OF_NUMS is $DIFF"

----------------------------------------------------------

2. Find factorial of the given number 
	factorial of 5 = 5 * 4 * 3 * 2 * 1 = 120
	Note: For negative numbers, print -1
----------------------------------------------------------
#!/usr/bin/bash
echo "Enter the number:"
read N
if [[ $N -ge 0 ]]
then 
	FACTORIAL=1
	for((I=$N; $I>1; I=$I-1))
	do
		FACTORIAL=$(($FACTORIAL * $I))	
	done

	echo "Factorial of $N is $FACTORIAL"
else	
	echo "-1"	
fi	
----------------------------------------------------------	

3. Reverse the given number 	
	123
	Reverse is 321
	Note: For negative numbers, print -1
----------------------------------------------------------
#!/usr/bin/bash	
echo "Enter a Number:" #12345
read N

if [[ $N -ge 0 ]]
then 
	REV=0
	T=$N
	while [[ $T -gt 0 ]]	
	do
		DIGIT=$(($T % 10)) #5 4 3 2 1 
		REV=$(($REV * 10 + $DIGIT)) #0*10+5=5 5*10+4=54 543 5432 54321 
		T=$(($T / 10))
	done

	echo "Reverse of the $N is $REV"
else	
	echo "-1"	
fi		
----------------------------------------------------------	

Lab Additional Exercises:
5. Find sum of odd numbers in given N numbers array 
----------------------------------------------------------
#!/usr/bin/bash	
declare -a NUMBERS
echo "Enter number of numbers:"
read N
echo "Enter numbers one by one:"
for((I=0; $I<$N; I=$I+1))
do
	echo "Enter number at index $I:"
	read ELEMENT 
	NUMBERS+=($ELEMENT)
done

S=0
for((I=0; $I<$N; I=$I+1))
do
	if [[ $((${NUMBERS[$I]} % 2)) -eq 1 ]]
	then 
		S=$(($S + ${NUMBERS[$I]}))
	fi 
done

echo "The sum of odd numbers of ${NUMBERS[@]} is $S"	
----------------------------------------------------------

6. Find max of given N numbers array 
----------------------------------------------------------
#!/usr/bin/bash	
declare -a NUMBERS
echo "Enter number of numbers:"
read N
echo "Enter numbers one by one:"
for((I=0; $I<$N; I=$I+1))
do
	echo "Enter number at index $I:"
	read ELEMENT 
	NUMBERS+=($ELEMENT)
done

MAX=${NUMBERS[0]}
for((I=1; $I<$N; I=$I+1))
do
	if [[ ${NUMBERS[$I]} -gt $MAX ]]
	then 
		MAX=${NUMBERS[$I]}
	fi 
done

echo "The max of numbers of ${NUMBERS[@]} is $MAX"	
----------------------------------------------------------

7. Rotate given name left k positions 
#!/usr/bin/bash	
#NAME="Maheswaran" #aheswaranM -> heswaranMa -> eswaranMah
#K=3
echo "Enter name:"
read NAME
echo "Number of positions to rotate left:"
read K
echo "${NAME:$K}${NAME:0:$K}"	
----------------------------------------------------------
Right Rotate K position the given string
----------------------------------------------------------
#!/usr/bin/bash	
NAME="Maheswaran" #nMaheswara -> anMaheswar -> ranMaheswa
K=3
: '
echo "Enter name:"
read NAME
echo "Number of positions to rotate left:"
read K
'
echo "${NAME: -$K:$K}${NAME::-$K}"	
#echo "${NAME: -3:3}${NAME::-3}"
----------------------------------------------------------
#!/usr/bin/bash	
: '
NAME="Maheswaran" #nMaheswara -> anMaheswar -> ranMaheswa
K=3
'
echo "Enter name:"
read NAME
echo "Number of positions to rotate left:"
read K

echo "${NAME: -$K:$K}${NAME::-$K}"	
#echo "${NAME: -3:3}${NAME::-3}"
----------------------------------------------------------

----------------------------------------------------------
X=$(echo "Maheswaran"|rev);echo $X
!!!X is reversed of "Maheswaran"
----------------------------------------------------------
8. Find number of palindrome strings from the given N strings 	
----------------------------------------------------------
#!/usr/bin/bash	
declare -a NAMES
echo "Enter number of names:"
read N
echo "Enter names one by one:"
for((I=0; $I<$N; I=$I+1))
do
	echo "Enter name at index $I:"
	read ELEMENT 
	NAMES+=($ELEMENT)
done
echo "The names given are ${NAMES[@]}"

#X=$(echo "Maheswaran"|rev);echo $X
C=0
for((I=0; $I<$N; I=$I+1))
do
	REV=$(echo "${NAMES[$I]}"|rev)
	echo "rev of ${NAMES[$I]} is $REV"
	if [[ ${NAMES[$I]} = $REV ]] #malayalam=malayalam palindrome | maheswaran=narawseham not palindrome
	then 
		C=$(($C+1))
	fi 
done

echo "The number of palindromes of ${NAMES[@]} is $C"

#palindrome words/names: level, madam, malayalam, radar, racecar, sis, mom, dad, gadag, rotator, nitin
----------------------------------------------------------

----------------------------------------------------------
Functions in bash script 
local variable and global variable 
----------------------------------------------------------
#!/usr/bin/bash	
A=10
B=20
function FIND_SUM(){
	echo "Number of arguments: $#"
	echo "arguments: $@"
	NUM1=$1
	NUM2=$2
	SUM=$(($NUM1+$NUM2)) #	SUM=$(($1+$2))
	return $SUM
}

FIND_SUM $A $B
S=$?
echo "Sum of $A and $B is $S"
----------------------------------------------------------
Functions to find sum and diff
----------------------------------------------------------
#!/usr/bin/bash	
A=30
B=20
function FIND_SUM(){
	echo "Number of arguments: $#"
	echo "arguments: $@"
	NUM1=$1
	NUM2=$2
	SUM=$(($NUM1+$NUM2)) #	SUM=$(($1+$2))
	return $SUM
}
function FIND_DIFF(){
	echo "Number of arguments: $#"
	echo "arguments: $@"
	NUM1=$1
	NUM2=$2
	SUM=$(($NUM1-$NUM2)) #	SUM=$(($1-$2))
	return $SUM
}
FIND_SUM $A $B
S=$?
FIND_DIFF $A $B
DIFF=$?
echo "Sum of $A and $B is $S"
echo "Diff of $A and $B is $DIFF"
----------------------------------------------------------

----------------------------------------------------------
local vs global variable 
----------------------------------------------------------
#!/usr/bin/bash	
C=0
COUNTER=0

function FIND_SUM(){
	NUM1=$1
	NUM2=$2
	SUM=$(($NUM1+$NUM2)) #	SUM=$(($1+$2))
	local COUNTER
	COUNTER=$(($COUNTER + 1))
	C=$(($C+500))
	return $SUM
}

FIND_SUM 20 10
S=$?
echo "Sum of $A and $B is $S"

FIND_SUM 40 5
S=$?
echo "Sum of $A and $B is $S"

echo "The value of COUNTER is $COUNTER"
echo "The value of C is $C"
----------------------------------------------------------


6. Find max of given N numbers array 
----------------------------------------------------------
#!/usr/bin/bash	
declare -a NUMBERS
echo "Enter number of numbers:"
read N
echo "Enter numbers one by one:"
for((I=0; $I<$N; I=$I+1))
do
	echo "Enter number at index $I:"
	read ELEMENT 
	NUMBERS+=($ELEMENT)
done

MAX=${NUMBERS[0]}
for((I=1; $I<$N; I=$I+1))
do
	if [[ ${NUMBERS[$I]} -gt $MAX ]]
	then 
		MAX=${NUMBERS[$I]}
	fi 
done

echo "The max of numbers of ${NUMBERS[@]} is $MAX"	
----------------------------------------------------------
Function to modularize (clean / understandable code)
----------------------------------------------------------
#!/usr/bin/bash	
declare -a NUMBERS
echo "Enter number of numbers:"
read N
MAX=0
function READ_NUMBERS(){
echo "Enter numbers one by one:"
for((I=0; $I<$N; I=$I+1))
do
	echo "Enter number at index $I:"
	read ELEMENT 
	NUMBERS+=($ELEMENT)
done
}
function FIND_MAX(){
MAX=${NUMBERS[0]}
for((I=1; $I<$N; I=$I+1))
do
	if [[ ${NUMBERS[$I]} -gt $MAX ]]
	then 
		MAX=${NUMBERS[$I]}
	fi 
done
}

READ_NUMBERS
FIND_MAX
echo "The max of numbers of ${NUMBERS[@]} is $MAX"
----------------------------------------------------------


----------------------------------------------------------
Diff between single quote and double quotes for the string 
----------------------------------------------------------
NAME="Maheswaran";
echo "$NAME";
echo "My name is $NAME";
echo 'My name is $NAME';
echo "My name is ${NAME}";
echo 'My name is ${NAME}';
echo "My name is \n$NAME";
echo $"My name is \n$NAME";
echo $'My name is \n$NAME';		#c-like string parsing
----------------------------------------------------------


----------------------------------------------------------
#Dictionary 
	"associative array" 
	"named indexed array" -> name is here the string / number
	"hash map in STL"
	key-value pairs
	
	key can be number/string
	
	key is unique				!!! Arjun
	
	and keys are sorted	but not clear how it is?????????*****************	!!! Arjun
----------------------------------------------------------
#!/usr/bin/bash	
#Dictionary "associative array" "named indexed array" -> name is here the string / number
declare -A sounds
sounds[dog]="bark"
sounds[cow]="moo"
sounds[bird]="tweet"
sounds[wolf]="howl"

echo ${sounds[@]}
echo ${sounds[cow]}

key="mahesh"
sounds[$key]="speak with you"
echo ${sounds[mahesh]}

key=150
sounds[$key]="I am 150"
echo ${sounds[150]}

echo ${sounds[@]}
----------------------------------------------------------

----------------------------------------------------------
#frequence of number occruances in the list of numbers
(10 20 30 10 10 20 10 30 5 40 5 5 5 5 5) 
10:4
20:2
30:2
5:6
40:1
----------------------------------------------------------
#!/usr/bin/bash	
#frequence of number occruances in the list of numbers
NUMBERS=(10 20 30 10 10 20 10 30 5 40 5 5 5 5 5) #10:4,20:2,30:2,5:6,40:1
declare -A numFreq
#numFreq[10]=0

for E in ${NUMBERS[@]}
do
	if [[ -z ${numFreq[$E]} ]]
	then
		numFreq[$E]=1
	else 
		numFreq[$E]=$((${numFreq[$E]} + 1))
	fi
done


#echo ${numFreq[@]}

echo "The number and its frequency of occurance are:"

for NUM in ${!numFreq[@]}	# Prefix "!" to read all the keys. otherwise, we will have the values.
do
	echo "$NUM is occurred in ${numFreq[$NUM]} times."
done
----------------------------------------------------------
The number and its frequency of occurance are:
40 is occurred in 1 times.
5 is occurred in 6 times.
10 is occurred in 4 times.
20 is occurred in 2 times.
30 is occurred in 2 times.
----------------------------------------------------------


BASH Scripting:
	Scripting Language for shell programming 
	Purpose: Job Automation 
	
	Scripting Language Elements:
	1. variables
	2. assignment statement
	3. print on console 
	4. read from keyboard 
	5. arithmetic operations for the integers 
	6. arithmetic operations for the floating point !!! ASSIGNMENT 
	7. conditionals
		arithmetic data comparisions 
			-eq -ne -gt -lt -ge -le 
			Example:
			[[ $NUM -gt 5 ]]
		string comparisons 
			< > = != 
			Example:
			[[ $NAME = "Maheswaran" ]] 
		logical operations 
			&& || !
			[[ $NUM -gt 5 ]] && [[ $NUM -lt 50 ]]
			
	8. if 
		if condition 
		then 
			#code 
		[elif condition 
		then 
			#code 
		#...
		[else
			#code 
		]
		]
		fi 
		
	9. case 
		case "$CHOICE"
			LABEL) CODE 
				;;
			LABEL) CODE 
				;;
			*) 
				DEFAULT 
		esac 
        Example:
		$CHOICE=3
		case "$CHOICE"
			1) 
				#Do Addition 
				;;
			2) #Do Subtraction 
				;;
			*) #Invalid Choice 
		esac 
	10. Loops 
		1. while 
			while [[ codition ]]
			do 
				#code here 
			done 
				
		2. for c-like 
			for((I=1; $I<=10; I=$I+1))
			do 
				#code here 
			done 
		3. for range 
			for I in (100..150..5) #start at 100 till before 150 increment by 5
			do 
				#code here 
			done 
		4. for range for items in the array / dictionary 
			for I in array/dictionary  
			do 
				#I is the element of the array 
			done 
		5. to stop the loop we can use "break"
	11. arrays 
		1. static array 
			ARRNAME=(data data data ... )
		2. dynamic array 					?????Diff bt small a and A in array declare 
			declare -a ARRAYNAME 	
			
		3. associative array (dictionary) 
			delcare -A ARRAYANAME 
		
		${ARRAYNAME[@]}  -> exapansion of the all the elements or values of the array 
		${#ARRAYNAME[@]}  -> number of elements in the array 
		${!ARRAYNAME[@]}  -> keys in the associative array 
		
		to access the element 
		${ARRAYNAME[$I]}  for example, $I=0 means first element 
		
	12. functions 
		function FUN_NAME(){
			#to read the args $1 $2 .. ${10} ${11}
			#to read all args $@
			#to know number of args $#
			#to declare the local variable we use the keyword "local" before variable name 
			#return RET_CODE  
		}
		
		RET_CODE can be accesssed via $?
		but RET_CODE is one byte 
		
	13. Strings with single quote, $ and single quote, double quote 
			
----------------------------------------------------------
NUMS=(10 20 30)
function DO_SUM(){

}		
DO_SUM ${NUMS[@]} #-> DO_SUM 10 20 30 #inside DO_SUM $1 will take 10, $ will take 2 etc 
----------------------------------------------------------


STRUCT kind of data structure in bash ?????

To use call by reference as workaround other than global variables  ??????
----------------------------------------------------------
from Bindu Madathil (privately):    12:58 PM
Sir, Any file handling?
from Bindu Madathil (privately):    12:59 PM
Sir, How to call a c program from bash		
----------------------------------------------------------			
	






