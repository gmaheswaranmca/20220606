---------------------------------------------------------------
int is_logged_in;               //I
   vs 
extern int is_logged_in;        //II

declaration definition 

"is_logged_in" with qualifier "extern" means 
somewhere is_logged_in is going to be "memory allocated" 


"is_logged_in" with qualifier "extern" means declaration 
"is_logged_in" without qualifier "extern" means definition "memory allocation"
---------------------------------------------------------------


---------------------------------------------------------------
"extern" keyword we can use for function 
if we ignore "extern" keyword for function declaration, compiler will provide it 
for function declaration, "extern" is optional
---------------------------------------------------------------

---------------------------------------------------------------
what is the header file?
	declarations for our source 
	declarations for variable, type, function 
	
	Example for variable declaration(global variable):
		extern int is_logged_in; 
		
	Example for variable definition(global variable): !!! in the source file 
		int is_logged_in;

what the header file can have?
	"just names"
	names may be the variable, type, function 
	names means "declations" 
	no memory allocations 
	
modularization?
	migrating code into many files 
	splitting code into functions and keeping functions in many files 

why do we go for modularization?	
	1. maintainance
	   readability - easy to understand 
			for whom? other programmers and even for us 
	   easy to debug - testable (unit test)
	2. reusability
	3. abstractions -> "hiding" the code at the time of the call 
		declarations 
		"ideas" than the "events"
---------------------------------------------------------------


mahesh@maheshubuntu:~/financeapp/build$ cd ../source
mahesh@maheshubuntu:~/financeapp/source$ gcc -I../header *.c -c
mahesh@maheshubuntu:~/financeapp/source$ ls
employee_app.c  employee_app.o  scheme_add_ux.c  scheme_add_ux.o  scheme_db.c  scheme_db.o
mahesh@maheshubuntu:~/financeapp/source$ mv *.o ../object
mahesh@maheshubuntu:~/financeapp/source$ ls
employee_app.c  scheme_add_ux.c  scheme_db.c
mahesh@maheshubuntu:~/financeapp/source$ ls ../object
employee_app.o  scheme_add_ux.o  scheme_db.o
mahesh@maheshubuntu:~/financeapp/source$ cd ../object
mahesh@maheshubuntu:~/financeapp/object$ gcc *.o -o ../build/finempapp
mahesh@maheshubuntu:~/financeapp/object$ cd ../build
mahesh@maheshubuntu:~/financeapp/build$ ./finempapp 
Choice (1-Manage Scheme, 2-Process Loan, 3-Release Loan, 0-Exit):
1
Choice (1-Add Scheme, 2-Update Loan, 3-Display Schemes, 0-Exit):
1
Read scheme details from the user console(keyboard) here... into scheme objectCall scheme_create pass the scheme object as the argumentChoice (1-Add Scheme, 2-Update Loan, 3-Display Schemes, 0-Exit):
0
Choice (1-Manage Scheme, 2-Process Loan, 3-Release Loan, 0-Exit):
0

---------------------------------------------------------------
Lab: to use gcc with various options 

1. salaries sort /v03
2. salaries sort /v04
3. Assignment Task of salaries sort 
4. Finance App - Case Study 
---------------------------------------------------------------
locate -> to search in the file system 	
	Example: 
		locate main.c 
		
find	-> to find the file in the given directory 
	Example:
		find main.c 
		!!! It will find the file in the working dir 
		find . -name main.c  
		find . -name salary_sort.c 
		
grep 							!!! SEARCH CONTENT of the file 
								!!! g/re/p
	grep <searchText> <file> <file> 
	!!! to find the given phrase (reg expr) in given file(s)	
	Example: 
		grep 'size' main.c		!!! to find the word 'size' in the file 'main.c'
		grep 'size' main.c -i 	!!! to find the word 'size' in the file 'main.c' case is ignored
		grep 'I'  main.c        !!!  to find the word 'I' in the file 'main.c'
		grep 'I'  main.c | grep I=0 !!!  to find the word 'I' in the file 'main.c'
										and then from the result we do further search the phrase "I=0"
		grep 'I'  main.c  > sample.txt    !!!  to find the word 'I' in the file 'main.c'
										and then stores the filtered content into 
										another new file named "sample.txt"
		grep salaries ver03/main.c ver04/main.c -i 
		!!! to find the word 'salaries' in the files 'ver03/main.c' and 'ver04/main.c'
			there case is ignored 
		grep salaries ver03/* ver04/* -i 	
		!!! to find the word 'salaries' in all the files of directories 'ver03' and 'ver04'
			there case is ignored 
		grep salaries ver03/salary_sort.c ver04/salary_sort.c -i
		!!! to find the word 'salaries' in the files 'ver03/salary_sort.c' and 'ver04/salary_sort.c'
			here case is ignored
			
diff !!! to find the difference in the contents of the given two files 
	Example:
		diff ver03/salary_sort.c ver04/salary_sort.c 
		!!!The differences in the files are all printed 
			
vi 
	search / replace 
		:%s/search/replace/g Search and replace in file
		Example:
		
	copy 
	move 
	delete 
	
	
from Bindu Madathil to everyone:    3:43 PM
Commenting Multiple Lines
Follow the steps given below for commenting multiple using the terminal.

First, press ESC
Go to the line from which you want to start commenting. 
Then, press ctrl + v, this will enable the visual block mode.
use the down arrow to select multiple lines that you want to comment.
Now, press SHIFT + I to enable insert mode.
Press # and it will add a comment to the first line. 
Then press ECS and wait for a second, # will be added to all the lines.	

---------------------------------------------------------------
to install the gcc if not exists
---------------------------------------------------------------
from Suma Vummadsingh to everyone:    3:54 PM
sudo apt install gcc
---------------------------------------------------------------