----------------------------------------------------------------------
Files
	•	Input and Output File Handling
	•	Opening & Closing a File
	•	Modes of File Opening
	•	Detection End of File
	•	File Pointers & Their Manipulation
	•	Text and Binary Files
	•	Sequential Files
	•	Random Access Files
----------------------------------------------------------------------	
stdio.h
	scanf
	printf
	fgets_s	
----------------------------------------------------------------------
	sscanf		int sscanf(const char* buffer, const char* format, ...)		//args are addresses
	sprintf		int sprintf(const char* buffer, const char* format, ...)	//args are value 
	
	fscanf		int fscanf(FILE *stream, const char* format, ...) //args are addresses 
	fprintf		int fprintf(FILE *stream, const char* format, ...) //args are value 
	
	fread		size_t fread (void* buffer,       size_t size, size_t count, FILE *stream );
	fwrite 		size_t fwrite(const void *buffer, size_t size, size_t count, FILE *stream );
				buffer -> address of object, size -> number of objects, count -> number of bytes per object 
				
	
	fputs		int fputs(const char *str, FILE *stream);
	fgets 		char* fgets(char *str, int count, FILE *stream)
	putchar -> stdout 
	puts -> stdout 
	
	fgetc 		int fgetc(FILE* stream);
	 getc 
	 
	fputc 		int fputc(int ch, FILE* stream);
     putc    
----------------------------------------------------------------------	 
fopen / fclose - file resource management 
	fopen	FILE *fopen( const char *filename, const char *mode );
	fclose 	int fclose( FILE *stream );
	
	mode	-  "w" "a" "r" "w+" "a+" "r+" 
			   "wb" "ab" "rb" "wb+" "ab+" "rb+" 
----------------------------------------------------------------------

File access flags
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
File access				Meaning				Explanation							Action if file			Action if file
mode string 																	already exists			does not exist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"r"						read				Open a file for reading				read from start			failure to open
"w"						write				Create a file for writing			destroy contents		create new
"a"						append				Append to a file					write to end			create new
"r+"					read extended		Open a file for read/write			read from start			error
"w+"					write extended		Create a file for read/write		destroy contents		create new
"a+"					append extended		Open a file for read/write			write to end			create new
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Random Access:
	long ftell( FILE *stream );		Returns the file position indicator for the file stream "stream"
	int fseek( FILE *stream, long offset, int origin ); 
		 Sets the file position indicator 
		 for the file stream "stream" 
		 to the value pointed to by "offset"
		 
		origin: SEEK_SET SEEK_CUR SEEK_END     

		If the stream is open in binary mode, 
		the new position is exactly offset bytes measured 
		from the beginning of the file if origin is SEEK_SET, 
		from the current file position if origin is SEEK_CUR, and 
		from the end of the file if origin is SEEK_END. 	


----------------------------------------------------------------------
date_t: day, month, year
employee_t: empId, empName, dateOfJoining, jobTitle, deptId, salary

		user						db functions 
		interface 
		
		emp_ui_create_emp			emp_db_insert 
		emp_ui_edit_emp				emp_db_update
		emp_ui_delete_emp			emp_db_delete
		emp_ui_searchById			emp_db_read 
----------------------------------------------------------------------		
CRUD operations 
	- Create Operation 
	- Read Opeartion 
	- Update !!! LATER
	- Delete !!! LATER 
----------------------------------------------------------------------
How to delete and edit/update the text file for business object manipulation:

	emp.txt
	1 Emp Det 1
	2 Emp Det 2
	3 Emp Det 3

	...

	1000 Emp Det 1000


	==>
	emptemp.txt
	1 Emp Det 1
	3 Emp Det 3

	...

	1000 Emp Det 1000


	==>
	emptemp.txt as emp.txt


	---------------------------------------------
	emp.txt
	1 Emp Det 1
	2 Emp Det 2
	3 Emp Det 3

	...

	1000 Emp Det 1000


	==>
	emptemp.txt
	1 Emp Det 1
	2 Emp Det 2(Updated)
	3 Emp Det 3

	...

	1000 Emp Det 1000


	==>
	emptemp.txt as emp.txt
	---------------------------------------------
===================================================
binary file:

abcefabcefabcefabcefabcefabcefabcef
-    -    -    -    -    -    -





	